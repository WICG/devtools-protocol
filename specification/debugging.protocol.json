{
    "version": {
        "major": "0",
        "minor": "1"
    },
    "domains": [
        {
            "domain": "Debugger",
            "description": "Debugger domain exposes JavaScript debugging capabilities. It allows setting and removing breakpoints, stepping through execution, exploring stack traces, etc.",
            "dependencies": [
                "Runtime"
            ],
            "types": [
                {
                    "id": "BreakpointId",
                    "type": "string",
                    "description": "Breakpoint identifier."
                },
                {
                    "id": "CallFrameId",
                    "type": "string",
                    "description": "Call frame identifier."
                },
                {
                    "id": "Location",
                    "type": "object",
                    "properties": [
                        {
                            "name": "scriptId",
                            "$ref": "Runtime.ScriptId",
                            "description": "Script identifier as reported in the \u003ccode\u003eDebugger.scriptParsed\u003c/code\u003e."
                        },
                        {
                            "name": "lineNumber",
                            "type": "integer",
                            "description": "Line number in the script (0-based)."
                        },
                        {
                            "name": "columnNumber",
                            "type": "integer",
                            "optional": true,
                            "description": "Column number in the script (0-based)."
                        },
                        {
                            "name": "msLength",
                            "type": "integer",
                            "description": "Microsoft: Length of code (i.e. number of characters) at this call frame."
                        }
                    ],
                    "description": "Location in the source code."
                },
                {
                    "id": "BreakLocation",
                    "type": "object",
                    "properties": [
                        {
                            "name": "scriptId",
                            "$ref": "Runtime.ScriptId",
                            "description": "Script identifier as reported in the \u003ccode\u003eDebugger.scriptParsed\u003c/code\u003e."
                        },
                        {
                            "name": "lineNumber",
                            "type": "integer",
                            "description": "Line number in the script (0-based)."
                        },
                        {
                            "name": "columnNumber",
                            "type": "integer",
                            "optional": true,
                            "description": "Column number in the script (0-based)."
                        },
                        {
                            "name": "msLength",
                            "type": "integer",
                            "description": "Microsoft: Length of code (i.e. number of characters) at this call frame."
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "optional": true,
                            "description": "Allowed values: debuggerStatement, call, return."
                        }
                    ],
                    "description": "Break location in the source code."
                },
                {
                    "id": "CallFrame",
                    "type": "object",
                    "properties": [
                        {
                            "name": "callFrameId",
                            "$ref": "CallFrameId",
                            "description": "Call frame identifier. This identifier is only valid while the debugger is paused."
                        },
                        {
                            "name": "functionName",
                            "type": "string",
                            "description": "Name of the JavaScript function called on this call frame."
                        },
                        {
                            "name": "functionLocation",
                            "$ref": "Location",
                            "optional": true,
                            "experimental": true,
                            "description": "Location in the source code."
                        },
                        {
                            "name": "location",
                            "$ref": "Location",
                            "description": "Location in the source code."
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "description": "JavaScript script name or url."
                        },
                        {
                            "name": "scopeChain",
                            "type": "array",
                            "items": {
                                "$ref": "Scope"
                            },
                            "description": "Scope chain for this call frame."
                        },
                        {
                            "name": "this",
                            "$ref": "Runtime.RemoteObject",
                            "description": "\u003ccode\u003ethis\u003c/code\u003e object for this call frame."
                        },
                        {
                            "name": "returnValue",
                            "$ref": "Runtime.RemoteObject",
                            "optional": true,
                            "description": "The value being returned, if the function is at return point."
                        }
                    ],
                    "description": "JavaScript call frame. Array of call frames form the call stack."
                },
                {
                    "id": "Scope",
                    "type": "object",
                    "properties": [
                        {
                            "name": "type",
                            "type": "string",
                            "enum": [
                                "global",
                                "local",
                                "with",
                                "closure",
                                "catch",
                                "block",
                                "script",
                                "eval",
                                "module"
                            ],
                            "description": "Scope type."
                        },
                        {
                            "name": "object",
                            "$ref": "Runtime.RemoteObject",
                            "description": "Object representing the scope. For \u003ccode\u003eglobal\u003c/code\u003e and \u003ccode\u003ewith\u003c/code\u003e scopes it represents the actual object; for the rest of the scopes, it is artificial transient object enumerating scope variables as its properties."
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "startLocation",
                            "$ref": "Location",
                            "optional": true,
                            "description": "Location in the source code where scope starts"
                        },
                        {
                            "name": "endLocation",
                            "$ref": "Location",
                            "optional": true,
                            "description": "Location in the source code where scope ends"
                        }
                    ],
                    "description": "Scope description."
                }
            ],
            "commands": [
                {
                    "name": "enable",
                    "description": "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."
                },
                {
                    "name": "disable",
                    "description": "Disables debugger for given page."
                },
                {
                    "name": "getPossibleBreakpoints",
                    "parameters": [
                        {
                            "name": "start",
                            "$ref": "Location",
                            "description": "Start of range to search possible breakpoint locations in."
                        },
                        {
                            "name": "end",
                            "$ref": "Location",
                            "description": "End of range to search possible breakpoint locations in (excluding). When not specified, end of scripts is used as end of range."
                        }
                    ],
                    "returns": [
                        {
                            "name": "locations",
                            "$ref": "BreakLocation",
                            "description": "List of the possible breakpoint locations."
                        }
                    ],
                    "description": "Returns possible locations for breakpoint. scriptId in start and end range locations should be the same."
                },
                {
                    "name": "setBreakpointsActive",
                    "parameters": [
                        {
                            "name": "active",
                            "type": "boolean",
                            "description": "New value for breakpoints active state."
                        }
                    ],
                    "description": "Activates / deactivates all breakpoints on the page."
                },
                {
                    "name": "setBreakpointByUrl",
                    "parameters": [
                        {
                            "name": "lineNumber",
                            "type": "integer",
                            "description": "Line number to set breakpoint at."
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "optional": true,
                            "description": "URL of the resources to set breakpoint on."
                        },
                        {
                            "name": "urlRegex",
                            "type": "string",
                            "optional": true,
                            "description": "Regex pattern for the URLs of the resources to set breakpoints on. Either \u003ccode\u003eurl\u003c/code\u003e or \u003ccode\u003eurlRegex\u003c/code\u003e must be specified."
                        },
                        {
                            "name": "columnNumber",
                            "type": "integer",
                            "optional": true,
                            "description": "Offset in the line to set breakpoint at."
                        },
                        {
                            "name": "condition",
                            "type": "string",
                            "optional": true,
                            "description": "Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true."
                        }
                    ],
                    "returns": [
                        {
                            "name": "breakpointId",
                            "$ref": "BreakpointId",
                            "description": "Id of the created breakpoint for further reference."
                        },
                        {
                            "name": "locations",
                            "type": "array",
                            "items": {
                                "$ref": "Location"
                            },
                            "description": "List of the locations this breakpoint resolved into upon addition."
                        }
                    ],
                    "description": "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in \u003ccode\u003elocations\u003c/code\u003e property. Further matching script parsing will result in subsequent \u003ccode\u003ebreakpointResolved\u003c/code\u003e events issued. This logical breakpoint will survive page reloads."
                },
                {
                    "name": "setBreakpoint",
                    "parameters": [
                        {
                            "name": "location",
                            "$ref": "Location",
                            "description": "Location to set breakpoint in."
                        },
                        {
                            "name": "condition",
                            "type": "string",
                            "optional": true,
                            "description": "Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true."
                        }
                    ],
                    "returns": [
                        {
                            "name": "breakpointId",
                            "$ref": "BreakpointId",
                            "description": "Id of the created breakpoint for further reference."
                        },
                        {
                            "name": "actualLocation",
                            "$ref": "Location",
                            "description": "Location this breakpoint resolved into."
                        }
                    ],
                    "description": "Sets JavaScript breakpoint at a given location."
                },
                {
                    "name": "removeBreakpoint",
                    "parameters": [
                        {
                            "name": "breakpointId",
                            "$ref": "BreakpointId"
                        }
                    ],
                    "description": "Removes JavaScript breakpoint."
                },
                {
                    "name": "stepOver",
                    "description": "Steps over the statement."
                },
                {
                    "name": "stepInto",
                    "description": "Steps into the function call."
                },
                {
                    "name": "stepOut",
                    "description": "Steps out of the function call."
                },
                {
                    "name": "pause",
                    "description": "Stops on the next JavaScript statement."
                },
                {
                    "name": "resume",
                    "description": "Resumes JavaScript execution."
                },
                {
                    "name": "getScriptSource",
                    "parameters": [
                        {
                            "name": "scriptId",
                            "$ref": "Runtime.ScriptId",
                            "description": "Id of the script to get source for."
                        }
                    ],
                    "returns": [
                        {
                            "name": "scriptSource",
                            "type": "string",
                            "description": "Script source."
                        }
                    ],
                    "description": "Returns source for the script with given id."
                },
                {
                    "name": "setPauseOnExceptions",
                    "parameters": [
                        {
                            "name": "state",
                            "type": "string",
                            "enum": [
                                "none",
                                "uncaught",
                                "all"
                            ],
                            "description": "Pause on exceptions mode."
                        }
                    ],
                    "description": "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is \u003ccode\u003enone\u003c/code\u003e."
                },
                {
                    "name": "evaluateOnCallFrame",
                    "parameters": [
                        {
                            "name": "callFrameId",
                            "$ref": "CallFrameId",
                            "description": "Call frame identifier to evaluate on."
                        },
                        {
                            "name": "expression",
                            "type": "string",
                            "description": "Expression to evaluate."
                        }
                    ],
                    "returns": [
                        {
                            "name": "result",
                            "$ref": "Runtime.RemoteObject",
                            "description": "Object wrapper for the evaluation result."
                        }
                    ],
                    "description": "Evaluates expression on a given call frame."
                },
                {
                    "name": "setVariableValue",
                    "parameters": [
                        {
                            "name": "scopeNumber",
                            "type": "integer",
                            "description": "0-based number of scope as was listed in scope chain. Only \u0027local\u0027, \u0027closure\u0027 and \u0027catch\u0027 scope types are allowed. Other scopes could be manipulated manually."
                        },
                        {
                            "name": "variableName",
                            "type": "string",
                            "description": "Variable name."
                        },
                        {
                            "name": "newValue",
                            "$ref": "Runtime.CallArgument",
                            "description": "New variable value."
                        },
                        {
                            "name": "callFrameId",
                            "$ref": "CallFrameId",
                            "description": "Id of callframe that holds variable."
                        }
                    ],
                    "description": "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."
                },
                {
                    "name": "setBlackboxPatterns",
                    "parameters": [
                        {
                            "name": "patterns",
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Array of regexps that will be used to check script url for blackbox state."
                        }
                    ],
                    "experimental": true,
                    "description": "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. The debugger will try to leave blackboxed script by performing \u0027step in\u0027 several times, finally resorting to \u0027step out\u0027 if unsuccessful."
                },
                {
                    "name": "msSetDebuggerPropertyValue",
                    "parameters": [
                        {
                            "name": "debuggerPropertyId",
                            "type": "string",
                            "description": "Microsoft: The property id (i.e. msDebuggerPropertyId) to set."
                        },
                        {
                            "name": "newValue",
                            "type": "string"
                        }
                    ],
                    "experimental": true,
                    "description": "Microsoft: Sets the specified debugger property to the specified value."
                }
            ],
            "events": [
                {
                    "name": "scriptParsed",
                    "parameters": [
                        {
                            "name": "scriptId",
                            "$ref": "Runtime.ScriptId",
                            "description": "Identifier of the script parsed."
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "description": "URL or name of the script parsed (if any)."
                        },
                        {
                            "name": "startLine",
                            "type": "integer",
                            "description": "Line offset of the script within the resource with given URL (for script tags)."
                        },
                        {
                            "name": "startColumn",
                            "type": "integer",
                            "description": "Column offset of the script within the resource with given URL."
                        },
                        {
                            "name": "endLine",
                            "type": "integer",
                            "description": "Last line of the script."
                        },
                        {
                            "name": "endColumn",
                            "type": "integer",
                            "description": "Length of the last line of the script."
                        },
                        {
                            "name": "executionContextId",
                            "$ref": "Runtime.ExecutionContextId",
                            "description": "Specifies script creation context."
                        },
                        {
                            "name": "sourceMapURL",
                            "type": "string",
                            "optional": true,
                            "description": "URL of source map associated with script (if any)."
                        },
                        {
                            "name": "length",
                            "type": "integer",
                            "optional": true,
                            "description": "This script length.",
                            "experimental": true
                        },
                        {
                            "name": "msParentId",
                            "type": "string",
                            "optional": true,
                            "experimental": true,
                            "description": "This is the parent document ID."
                        },
                        {
                            "name": "msMimeType",
                            "type": "string",
                            "optional": true,
                            "experimental": true,
                            "description": "This is the mime type."
                        },
                        {
                            "name": "msIsDynamicCode",
                            "type": "boolean",
                            "optional": true,
                            "experimental": true,
                            "description": "This indicates whether it is dynamic code."
                        },
                        {
                            "name": "msLongDocumentId",
                            "type": "integer",
                            "optional": true,
                            "experimental": true,
                            "description": "This is the long document ID."
                        }
                    ],
                    "description": "Fired when the script is parsed. This event is also fired for all known and uncollected scripts upon enabling debugger."
                },
                {
                    "name": "breakpointResolved",
                    "parameters": [
                        {
                            "name": "breakpointId",
                            "$ref": "BreakpointId",
                            "description": "Breakpoint unique identifier."
                        },
                        {
                            "name": "location",
                            "$ref": "Location",
                            "description": "Actual breakpoint location."
                        },
                        {
                            "name": "msLength",
                            "type": "integer",
                            "optional": true,
                            "experimental": true,
                            "description": "Microsoft: Length of code (i.e. number of characters) at the breakpoint location."
                        }
                    ],
                    "description": "Fired when breakpoint is resolved to an actual script and location."
                },
                {
                    "name": "paused",
                    "parameters": [
                        {
                            "name": "callFrames",
                            "type": "array",
                            "items": {
                                "$ref": "CallFrame"
                            },
                            "description": "Call stack the debugger stopped on."
                        },
                        {
                            "name": "reason",
                            "type": "string",
                            "enum": [
                                "breakpoint",
                                "step",
                                "exception",
                                "other"
                            ],
                            "description": "Pause reason."
                        },
                        {
                            "name": "data",
                            "type": "object",
                            "optional": true,
                            "description": "Object containing break-specific auxiliary properties."
                        },
                        {
                            "name": "hitBreakpoints",
                            "type": "array",
                            "optional": true,
                            "items": {
                                "type": "string"
                            },
                            "description": "Hit breakpoints IDs"
                        }
                    ],
                    "description": "Fired when the debuggers breaks for a breakpoint or exception."
                },
                {
                    "name": "resumed",
                    "description": "Fired when the debugger resumes execution."
                }
            ]
        }
    ]
}